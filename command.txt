uvicorn main:app

uvicorn main:app --reload //monitors and restarts server 




CRUD

1. Create  -> POST -> /posts -> @app.post("/posts")

2. Read  -> GET -> /posts/:id -> @app.get("/posts/{id}")
         -> GET -> /posts/  -> @app.get("/posts")

3. Update -> PUT/PATCH -> /posts/:id -> @app.put("/posts/{id}")

4. Delete -> DELETE -> /posts/:id -> @app.delete("/posts/{id}")





// Swagger ui
http://127.0.0.1:8000/docs






// redoc 
http://127.0.0.1:8000/redoc



uvicorn app.main:app --reload


//creates database
 CREATE DATABASE fastapi
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;



# psycopg2 
pip install psycopg2-binary

#1 connect to postgres sql
import psycopg2

conn = psycopg2.connect(
    dbname = "your_db_name",
    user="your_username",
    password="your_password",
    host="localhost", # or remote IP,
    port="5432"
)

#2 create a cursor

cur = conn.cursor()
cur.execute("SELECT * FROM users;")
rows = cur.fetchall()

for row in rows():
    print(row)


#3 Insert database
name = "alice",
email = "alice@example.com"

curr.execute(
"INSERT INTO users (name, email) VALUES (%s, %s)",
(name, email)
)
conn.commit()

#4 close CONNECTION
cur.close()
conn.close()


# optional with auto close
with psycopg2.connect(...) as conn:
    with conn.cursor() as cur:
        cur.execute("SELECT * FROM users;")
        print(cur.fetchall())



# Users   
@app.post("/login", status_code=status.HTTP_200_OK, response_model= schemas.User)
def login(user: schemas.UserCreate, db: Session = Depends(get_db)):
    
    auth_user =  db.query(models.User).filter(models.User.email == user.email).first()

    if(auth_user and auth_user.password == user.password):
        return auth_user
    
    raise HTTPException(
        status_code=status.HTTP_404_NOT_FOUND,
        detail="Wrong email or password"
    )

@app.get("/users", status_code=status.HTTP_200_OK, response_model= List[schemas.UserGet])
def get_users( db: Session = Depends(get_db)):
    
    users = db.query(models.User).all()

    if not users:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Wrong email or password"
        ) 
    
    return users



@app.post("/create_users", status_code=status.HTTP_201_CREATED, response_model= schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    email = user.email.lower()
    user_exists = db.query(models.User).filter(models.User.email == email).first()

    if user_exists:
        raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail="Email already taken")

    new_user = models.User(**user.model_dump())

    db.add(new_user)
    db.commit()
    db.refresh(new_user)
 
    return new_user


@app.delete("/users", status_code=status.HTTP_204_NO_CONTENT)
def delete_users(user: schemas.UserCreate, db: Session = Depends(get_db)):
    email = user.email.lower()
    user_exists = db.query(models.User).filter(models.User.email == email)

    if(user_exists.first().password == user.password):
        user_exists.delete()
        db.commit()
        return Response(status_code=status.HTTP_204_NO_CONTENT)

    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Wrong email or password")
    
    
@app.put("/users", status_code=status.HTTP_202_ACCEPTED, response_model= schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    email = user.email.lower()
    user_exists = db.query(models.User).filter(models.User.email == email)

    if not user_exists.first():
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Wrong email or password")
    
    if user_exists.first().password == user.password:
        raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail="Old password used, please provide new password")

    user_exists.update(user.model_dump(), synchronize_session=False)
    db.commit()
 
    return user_exists.first()




# for password hashing

pip install 'passlib[bcrypt]'



# generate and verify JWT tokens
pip install "python-jose[crptography]"

# generates 32 long char string
openssl rand -hex 32



# Tutorial for sql
https://neon.com/postgresql/tutorial





#######
#connect to postgresql


#1
 psql -U postgres

#2 enter password
postgres=#

#3 switch the current db to dvdrental
\c dvdrental



#CONNECTION cmd
psql -U <username> -d <database_name> -h <host> -p <port>
eg psql -U postgres -d mydb -h localhost -p 5432


#CONNECTION using psycopg2
import psycopg2

conn = psycopg2.connect(
    dbname="mydb",
    user="postgres",
    password="your_password",
    host="localhost",
    port="5432"
)
cur = conn.cursor()
cur.execute("SELECT * FROM my_table;")
rows = cur.fetchall()


#Run sql scripts
psql -U <username> -d <database_name> -f path/to/your_script.sql
eg psql -U postgres -d mydb -f ./init.sql


#psql shell
\i path/to/your_script.sql

#Example to create a user, db and a table
#1 connect to super user
psql -U postgres
#2 create a database & user
CREATE DATABASE mydb;
CREATE USER harish WITH PASSWORD 'your_password';
GRANT ALL PRIVILEGES ON DATABASE mydb TO harish;
